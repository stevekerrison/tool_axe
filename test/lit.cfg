# -*- Python -*-

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'axe'

# target_triple: Used by ShTest and TclTest formats for XFAIL checks.
config.target_triple = 'dummy'

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(execute_external = False)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c','.xc','.S']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
axe_obj_root = getattr(config, 'axe_obj_root', None)
if axe_obj_root is not None:
    config.test_exec_root = os.path.join(axe_obj_root, 'test')

# Tweak the PATH to include the bin dir
if axe_obj_root is not None:
    axe_bin_dir = getattr(config, 'axe_bin_dir', None)
    if not axe_bin_dir:
        lit.fatal('No axe bin dir set!')
    path = os.path.pathsep.join((axe_bin_dir,
                                config.environment['PATH']))
    config.environment['PATH'] = path

###

# Discover the 'xcc' to use.

import os

def inferXCC(PATH):
    # Look in the path.
    xcc = lit.util.which('xcc', PATH)

    if not xcc:
        lit.fatal("couldn't find 'xcc' program")

    return xcc

def propagateEnv():
	varNames = [
		'XCC_DEVICE_PATH', 'XCC_TARGET_PATH', 'XCC_LIBRARY_PATH',
		'XCC_EXEC_PREFIX', 'XCC_C_INCLUDE_PATH', 'XCC_CPLUS_INCLUDE_PATH',
		'XCC_XC_INCLUDE_PATH', 'XCC_ASSEMBLER_INCLUDE_PATH', ]
	for name in varNames:
		try:
			config.environment[name] = os.environ[name]
		except KeyError:
			pass

xcc = inferXCC(config.environment['PATH'])
propagateEnv()
if not lit.quiet:
    lit.note('using xcc: %r' % xcc)
config.substitutions.append((' xcc ', ' ' + xcc + ' '))

test_common_dir = os.path.join(config.test_source_root, '..', 'test_common')
exception_expect = os.path.join(test_common_dir, 'exception_expect.S')
config.substitutions.append(('%exception_expect', ' ' + exception_expect + ' '))
